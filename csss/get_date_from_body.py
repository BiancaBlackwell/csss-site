from time import strptime
import datetime
import base64

body="RGVsaXZlcmVkLVRvOiBjc3NzLndlYnNpdGVAZ21haWwuY29tClJlY2VpdmVkOiBieSAyMDAyOmFkZjo4ODVjOjA6MDowOjA6MCB3aXRoIFNNVFAgaWQgZTI4LXY2Y3NwMTExMTQ1NHdyZTsKICAgICAgICBTYXQsIDcgSnVsIDIwMTggMTk6NTM6MzkgLTA3MDAgKFBEVCkKWC1Hb29nbGUtU210cC1Tb3VyY2U6IEFBT01ncGVjaE94NU8wS0FaVGZ6VGNQYWk3alptc3lONkgzN3JvQVcvTURhVUI3SkludlFoMk1IeFdxamUvdy80WWQydUtLNHFSbEEKWC1SZWNlaXZlZDogYnkgMjAwMjphNjM6MzY4Njo6IHdpdGggU01UUCBpZCBkMTI4LXY2bXIxMzg3NjkzMHBnYS4xOC4xNTMxMDE4NDE5NTU2OwogICAgICAgIFNhdCwgMDcgSnVsIDIwMTggMTk6NTM6MzkgLTA3MDAgKFBEVCkKQVJDLVNlYWw6IGk9MTsgYT1yc2Etc2hhMjU2OyB0PTE1MzEwMTg0MTk7IGN2PW5vbmU7CiAgICAgICAgZD1nb29nbGUuY29tOyBzPWFyYy0yMDE2MDgxNjsKICAgICAgICBiPVNIYkdaNnNBaksxblp5ekozbFV0ZVpYY1hwMFpKNy8vWjcrYnVJSVB1N1hSQjJKZjhmKzhPWWMzTFMxKzNKRWJnSAogICAgICAgICBpdDFraWc2aHh2VXpzaUxPc3hnUU12bjVZcU9NTEJLMnIveFJSeityazVvL3JieHBQeU94Umd1N0xINlFWNCthcXJ3dAogICAgICAgICBwYVNBQk5TbkhmNGFiOGQ0UHBNZ1NrWU5aUXp5ZUlOa2Uzbno0VEhlQncxVEV2WVN6WFloTjlaUW1pcXpHMk1zNG92agogICAgICAgICBjc0dLSHF0YmQ0Rys5clYzcm5qaC9TQytNNFB0Vk9sQ29iWDdDV2RERDhXcWJ5MXZRZ2lVdXZTZE9TSXJWL3JXRjhrRQogICAgICAgICBWSWhWWm5OU21mUUZTZ2c1U3lNdmpHLzBCZTh6RjVaK1I0VEFITHdURVZIUmdXK0ZURmkrQXN5NXgwODlLck5aMFV4cQogICAgICAgICA1ODh3PT0KQVJDLU1lc3NhZ2UtU2lnbmF0dXJlOiBpPTE7IGE9cnNhLXNoYTI1NjsgYz1yZWxheGVkL3JlbGF4ZWQ7IGQ9Z29vZ2xlLmNvbTsgcz1hcmMtMjAxNjA4MTY7CiAgICAgICAgaD1jb250ZW50LXRyYW5zZmVyLWVuY29kaW5nOm1pbWUtdmVyc2lvbjpzdWJqZWN0OnRvOnJlcGx5LXRvOmZyb20KICAgICAgICAgOmRhdGU6bWVzc2FnZS1pZDphcmMtYXV0aGVudGljYXRpb24tcmVzdWx0czsKICAgICAgICBiaD1kZnFHQnYyYUJFZHl5YklqMDBEQXY3enpZZUhSR2hDeVN6ZWRJOEhRbGlJPTsKICAgICAgICBiPURMZU1kek5mRW40VGpxQUJxUDZhQ2c1WkFSV2U3QkpoSEpYRzVhMk5qekdoSXNFMkZ4QnNqNndyNXBQMFdpWm5UbAogICAgICAgICBuNDhKcnhvQ21ETzkyOGt5NnlpbHVJYTM4OG5xeTBvSHp0Qy8vaVhrVFAxeFZ2NlJScS84azllV1FpN0R5US92a1FnTQogICAgICAgICBiWU5vc3lvcWlZcDV2TXVtdVczbzM1V3NyTXk1bkVjQmVFc28xTmp0cXJiSjNwU2lPUWNtSkVFVkYxeVpROUtxVVAxcgogICAgICAgICA2L2dWRFlOMW5EeDUzVktydlhNZFF4dDZKc0w0TzBzbThPQmxWTlBOZmxkekJvS1dpVVdqNnF1Mnp0WnIzNk10QTRVVQogICAgICAgICBJb3l4T3RtZVpKaFpPUm9WMWVvTExRTExNOTJxWlA0WVZOQTNvSTVNaU1xZVh0OFdRaERtbWV3MStsbGlRbXBJU0o0ZQogICAgICAgICBJR093PT0KQVJDLUF1dGhlbnRpY2F0aW9uLVJlc3VsdHM6IGk9MTsgbXguZ29vZ2xlLmNvbTsKICAgICAgIHNwZj1wYXNzIChnb29nbGUuY29tOiBkb21haW4gb2Ygb3duZXItY3Nzcy1hbm5vdW5jZUBzZnUuY2EgZGVzaWduYXRlcyAxNDIuNTguMTAwLjExNiBhcyBwZXJtaXR0ZWQgc2VuZGVyKSBzbXRwLm1haWxmcm9tPW93bmVyLWNzc3MtYW5ub3VuY2VAc2Z1LmNhClJldHVybi1QYXRoOiA8b3duZXItY3Nzcy1hbm5vdW5jZUBzZnUuY2E+ClJlY2VpdmVkOiBmcm9tIG1haWxndzEuc2Z1LmNhIChtYWlsZ3cxLnNmdS5jYS4gWzE0Mi41OC4xMDAuMTE2XSkKICAgICAgICBieSBteC5nb29nbGUuY29tIHdpdGggRVNNVFBTIGlkIDk1LXY2c2kxMTcyOTgwMXBsZC40MjYuMjAxOC4wNy4wNy4xOS41My4zOAogICAgICAgIGZvciA8Y3Nzcy53ZWJzaXRlQGdtYWlsLmNvbT4KICAgICAgICAodmVyc2lvbj1UTFMxXzIgY2lwaGVyPUVDREhFLVJTQS1BRVMxMjgtR0NNLVNIQTI1NiBiaXRzPTEyOC8xMjgpOwogICAgICAgIFNhdCwgMDcgSnVsIDIwMTggMTk6NTM6MzkgLTA3MDAgKFBEVCkKUmVjZWl2ZWQtU1BGOiBwYXNzIChnb29nbGUuY29tOiBkb21haW4gb2Ygb3duZXItY3Nzcy1hbm5vdW5jZUBzZnUuY2EgZGVzaWduYXRlcyAxNDIuNTguMTAwLjExNiBhcyBwZXJtaXR0ZWQgc2VuZGVyKSBjbGllbnQtaXA9MTQyLjU4LjEwMC4xMTY7CkF1dGhlbnRpY2F0aW9uLVJlc3VsdHM6IG14Lmdvb2dsZS5jb207CiAgICAgICBzcGY9cGFzcyAoZ29vZ2xlLmNvbTogZG9tYWluIG9mIG93bmVyLWNzc3MtYW5ub3VuY2VAc2Z1LmNhIGRlc2lnbmF0ZXMgMTQyLjU4LjEwMC4xMTYgYXMgcGVybWl0dGVkIHNlbmRlcikgc210cC5tYWlsZnJvbT1vd25lci1jc3NzLWFubm91bmNlQHNmdS5jYQpYLVNwYW0tTGV2ZWw6IFNwYW0tTGV2ZWwgClJlY2VpdmVkOiBmcm9tIGdhcmliYWxkaTQudGllcjIuc2Z1LmNhIChnYXJpYmFsZGk0LnRpZXIyLnNmdS5jYSBbMTAuMi41LjldKQoJYnkgbWFpbGd3MS5zZnUuY2EgKDguMTQuOS84LjE0LjQvU0ZVLTcuMEgpIHdpdGggRVNNVFAgaWQgdzY4MnJjNlIwMjczMTcKCWZvciA8Y3Nzcy53ZWJzaXRlQGdtYWlsLmNvbT47IFNhdCwgNyBKdWwgMjAxOCAxOTo1MzozOCAtMDcwMApNZXNzYWdlLUlEOiA8MTA5MzA3NzY3MC4xMTUzMTAxODQxODgyNy5KYXZhTWFpbC5teXNmdUBnYXJpYmFsZGk0LnRpZXIyLnNmdS5jYT4KRGF0ZTogU2F0LCA3IEp1bCAyMDE4IDE5OjUzOjM4IC0wNzAwIChQRFQpCkZyb206IG93bmVyLWNzc3MtYW5ub3VuY2VAc2Z1LmNhClJlcGx5LVRvOiBvd25lci1jc3NzLWFubm91bmNlQHNmdS5jYQpUbzogY3Nzcy53ZWJzaXRlQGdtYWlsLmNvbQpTdWJqZWN0OiBXZWxjb21lIHRvIGNzc3MtYW5ub3VuY2UgbWFpbGluZyBsaXN0Ck1JTUUtVmVyc2lvbjogMS4wCkNvbnRlbnQtVHlwZTogdGV4dC9wbGFpbjsgY2hhcnNldD11cy1hc2NpaQpDb250ZW50LVRyYW5zZmVyLUVuY29kaW5nOiA3Yml0ClgtTWFpbGVyOiBXT01haWxlcgoKV2VsY29tZSB0byB0aGUgQ1NTUyBhbm5vdW5jZW1lbnRzIG1haWxpbmcgbGlzdC4gWW91IGhhdmUgYmVlbiBzdWNjZXNzZnVsbHkgYWRkZWQgdG8gdGhlIGxpc3QgY3Nzcy1hbm5vdW5jZUBzZnUuY2EsIHdoaWNoIGlzIGEgYnJvYWRjYXN0IG1lZGl1bSB0byBmaW5kIG91dCBhYm91dCBzb2NpZXR5IG1lZXRpbmdzIGFuZCBldmVudHMuIFlvdSBjYW4gZXhwZWN0IHRvIHR5cGljYWxseSByZWNlaXZlIHplcm8gdG8gdGhyZWUgZS1tYWlscyBlYWNoIHdlZWsgZnJvbSB0aGlzIGxpc3QuCgpUaGlzIGlzIGEgbW9kZXJhdGVkIGxpc3QsIGFuZCBpZiB5b3Ugd291bGQgbGlrZSB0byBzdGFydCBhIGRpc2N1c3Npb24gb24gYW55IG9mIHRoZSBlLW1haWxzIHBvc3RlZCB0byB0aGlzIGxpc3QsIHBsZWFzZSBhZGRyZXNzIHRoZW0gdG8gY3Nzcy1hY3RpdmVAc2Z1LmNhLiBjc3NzLWFjdGl2ZSBpcyBhIGZvcnVtIGZvciBwZW9wbGUgYWN0aXZlbHkgaW52b2x2ZWQgaW4gdGhlIENTU1MuCgpUaGUgQ1NTUyB3ZWIgc2l0ZSBtYXkgYmUgYWNjZXNzZWQgYXQgPGh0dHA6Ly9jc3NzLmNzLnNmdS5jYT4uCgpJZiB5b3UgcmVjZWl2ZWQgdGhpcyBtZXNzYWdlIHdpdGhvdXQgam9pbmluZyB0aGUgbWFpbCBsaXN0IHlvdXJzZWxmLCB0aGF0IG1lYW5zIHRoYXQgdGhlIGxpc3Qgb3duZXIgaGFzIGFkZGVkIHlvdSwgbW9zdCBsaWtlbHkgYmVjYXVzZSB5b3Ugd3JvdGUgZG93biB5b3VyIGUtbWFpbCBhZGRyZXNzIG9uIGEgc2lnbnVwIHNoZWV0LiBJZiB5b3Ugd291bGQgbGlrZSB0byB1bnN1YnNjcmliZSBmcm9tIHRoaXMgbGlzdCwgeW91IGNhbiBkbyBzbyB0aHJvdWdoIHRoZSBzeXN0ZW0gYXQgbWFpbGxpc3Quc2Z1LmNhLiBUaGlzIGNhbiBiZSBkb25lIGJ5IHNpZ25pbmcgaW4gd2l0aCB5b3VyIFNGVSBjcmVkZW50aWFscywgc2VsZWN0aW5nICJmaW5kIG1haWxsaXN0cyB0byB3aGljaCBJIGJlbG9uZywiIGFuZCB0aGVuIHVuc3Vic2NyaWJpbmcgZnJvbSBjc3NzLWFubm91bmNlLiBEbyBOT1Qgc2VuZCBhbiBlbWFpbCB0byBjc3NzLWFubm91bmNlLgoKRm9yIGZ1cnRoZXIgYXNzaXN0YW5jZSwgcGxlYXNlIGUtbWFpbCB0aGUgQ1NTUyBleGVjdXRpdmUgYXQgY3Nzcy1leGVjQHNmdS5jYS4K"
body=str(base64.b64decode(body))
print("converted body=[",end='')
print(body,end='')
print("]")

def extract_date(decoded_date):
  rev = decoded_date[::-1]
  revIndexOfPDT=rev.index(")TDP(")
  revIndexOfLast=rev.find(" ",revIndexOfPDT+9)
  revIndexOfFirst=rev.find(" ",revIndexOfLast+1)
  for x in range(4):
    revIndexOfFirst=rev.find(" ",revIndexOfFirst+1)
  indexOfFirst=len(decoded_date)-revIndexOfFirst-1
  indexOfLast=len(decoded_date)-revIndexOfLast-1
  print ("extract_date(decoded_date)=["+str(decoded_date[indexOfFirst+1:indexOfLast])+"]")

def reverseFind(string, startingIndex, charToFind):
  for i in range(startingIndex-1, 0, -1):
    if string[i] is charToFind:
      return i

def extract_date_v2(decoded_date):
  index = reverseFind(decoded_date,decoded_date.index("(PDT)"), " ")
  last_index = reverseFind(decoded_date,index, " ")
  for x in range(0,6):
    index = reverseFind(decoded_date,index, " ")
  return decoded_date[index+1:last_index]

extract_date(body)
date=extract_date_v2(body)

#print("extracted_date=["+str(date)+"]")
def convert_email_datetime_string_to_naive_datetime_object(date_from_email):
  print("date_from_email=["+str(date_from_email)+"]")
  indexBeforeDate = date_from_email.find(" ", 1)
  indexAfterDay = date_from_email.find(" ", indexBeforeDate+ 1)
  day = int(date_from_email[indexBeforeDate+1:indexAfterDay])
  
  indexAfterMonth = date_from_email.find(" ", indexAfterDay +1)
  month = date_from_email[indexAfterDay+1:indexAfterMonth]
  month = int(strptime(month,'%b').tm_mon)
  
  indexAfterYear = date_from_email.find(" ", indexAfterMonth + 1)
  year = int(date_from_email[indexAfterMonth+1:indexAfterYear])

  indexAfterHour = date_from_email.find(":", indexAfterYear + 1)
  hour = int(date_from_email[indexAfterYear+1:indexAfterHour])

  indexAfterMinute = date_from_email.find(":", indexAfterHour + 1)
  minute = int(date_from_email[indexAfterHour+1:indexAfterMinute])
  
  second = int(date_from_email[indexAfterMinute+1:])

  return datetime.datetime(year, month, day, hour, minute, second)

print("date=["+str(date)+"]")
date=convert_email_datetime_string_to_naive_datetime_object(date)
print("converted_date=["+str(date)+"]")


